#!/usr/bin/env coffee

optimist = require 'optimist'
WebSocketClient = require('websocket').client

{Map} = require '../lib/map'
{ClientWorld} = require '../lib/game'

argv = optimist
  .options('h', alias: 'host', default: '127.0.0.1')
  .options('p', alias: 'port', default: 8200)
  .options('b', alias: 'bgcolor', default: 'black')
  .options('f', alias: 'fgcolor', default: 'white')
  .argv

class View

  @Colors: ['red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white']

  constructor: (@bgcolor, @fgcolor) ->
    @charm = require('charm')()
    @charm.pipe(process.stdout)
    @charm
      .reset()
      .erase('screen')
      .cursor(false)
      .position(0, 0)
    @charm.background(@bgcolor)
    @charm.foreground(@fgcolor)

  draw: (world) ->
    @charm.erase 'screen'

    # Draw a character for each agent.
    world.map.foreach (p) =>
      @charm.position p.x + 1, p.y + 1
      switch world.map.get(p)
        when Map.Cells.EMPTY
          @charm.write ' '
        when Map.Cells.WALL
          switch world.map.wallType p
            when 'h' then @charm.write '-'
            when 'v' then @charm.write '|'
            else @charm.write '+'
        when Map.Cells.ROOM
          @charm.write '.'
        when Map.Cells.DOOR
          @charm.write '_'
        when Map.Cells.HALLWAY
          @charm.write '#'

    # Always draw alive agents on top of dead ones.
    world.agents.sort (a, b) -> if a.isAlive() then 1 else -1

    # Draw a character for each agent.
    for agent in world.agents
      @charm.position agent.location.x + 1, agent.location.y + 1

      # All dead agents are a corpse.
      if not agent.isAlive()
        @charm.write 'x'
        continue

      switch agent.type
        when 'mosquito'
            @charm.push(true)
            @charm.foreground('red').write 'M'
            @charm.pop(true)
        when 'drone' then @charm.write 'o'
        else @charm.write '?'

    return

  teardown: ->
    @charm.cursor(true).erase('line')

client = null
world = new ClientWorld()
view = new View(argv.bgcolor, argv.fgcolor)

process.on 'exit', ->
  view.teardown()

tryConnecting = ->

  client = new WebSocketClient()

  client.on 'connectFailed', (err) ->
    if err.code in ['ECONNREFUSED', 'ECONNRESET']
      setTimeout tryConnecting, 500
    else
      console.error err

  client.on 'connect', (conn) ->
    console.log 'Connected to realm server'

    conn.on 'message', (message) ->
      tuple = JSON.parse message.utf8Data
      return if not tuple?.length == 2
      [cmd, data] = tuple
      return if cmd != 'state'
      world.loadFromState data
      view.draw world

  client.connect "ws://#{ argv.host }:#{ argv.port }", 'realm-protocol'

tryConnecting()
